openapi: 3.0.1
info:
  title: Ticketline
  description: This is the definition of the WebApi of Ticketline - as planned and
    implemented by Group 16 SE&PM SS2020
  contact:
    email: e11808229@student.tuwien.ac.at
  version: 0.0.1
servers:
- url: http://localhost:8080/v1
tags:
- name: user
  description: Users and customer access and modification
- name: news
  description: News creation and access
- name: location
  description: Manage locations
- name: event
  description: Manage events
- name: ticket
  description: Create, print, and manage tickets
- name: artist
  description: Manage artists
paths:
  /user:
    get:
      security:
        - ticketline_auth: []
      tags:
        - user
      summary: Get all locked users - Admin task
      operationId: getUsers
      parameters:
        - in: query
          name: locked
          required: false
          schema:
            type: boolean
          description: If true, will return locked users only
          example: true
        - in: query
          name: email
          required: false
          schema:
            type: string
          description: E-Mail to search for
          example: max.mustermann@example.com
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination number
          example: 0
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserInfoDTO'
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    post:
      tags:
      - user
      summary: Register a new user
      operationId: register
      requestBody:
        description: User information to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
        required: true
      responses:
        201:
          description: Registered
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        409:
          description: Already existing user with this email address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Errors in parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    delete:
      tags:
        - user
      security:
        - ticketline_auth: []
      summary: remove own user account
      operationId: removeMyAccount
      responses:
        200:
          description: Successfully removed user account
          content: {}
        403:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Business error on removal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/{userId}:
    put:
      security:
        - ticketline_auth: []
      tags:
      - user
      summary: Update the profile information for a user
      operationId: updateUser
      requestBody:
        description: Updated user information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDTO'
        required: true
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of a user to update the profile information for
          example: 3
      responses:
        200:
          description: Successfully changed profile information
          content: {}
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Validation failed on updated user information input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    patch:
      tags:
        - user
      security:
        - ticketline_auth: []
      summary: Reset a password of a user - Admin task
      operationId: resetPassword
      requestBody:
        description: New Login information about the user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDTO'
        required: true
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the user to reset the password for
          example: 3
      responses:
        200:
          description: Successfully resetted password
          content: {}
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Validation failed on updated user information input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/self:
    get:
      security:
        - ticketline_auth: []
      tags:
      - user
      summary: Get user information for the currently logged in user
      operationId: getSelf
      responses:
        200:
          description: Currently logged in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO'
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/{userId}/unlock:
    patch:
      security:
        - ticketline_auth: []
      tags:
      - user
      summary: Unlock a user after being locked because of too many login attempts - Admin task
      operationId: unlockUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the user to unlock
          example: 3
      responses:
        200:
          description: Successfully unlocked user
          content: {}
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        404:
          description: User to unlock not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/{userId}/lock:
    patch:
      security:
        - ticketline_auth: []
      tags:
      - user
      summary: Lock a user independent of wrong login attempts - Admin task
      operationId: lockUser
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
            format: int64
          required: true
          description: ID of the user to lock
          example: 3
      responses:
        200:
          description: Successfully locked user
          content: {}
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        404:
          description: User to lock not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/readNews:
    post:
      security:
        - ticketline_auth: []
      tags:
        - user
      summary: Save read news for the currently logged in user
      operationId: addReadNewsOfUser
      requestBody:
        description: Read news to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsDTO'
        required: true
      responses:
        200:
          description: Successfully added read news
          content: {}
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        404:
          description: Cannot find user to modify
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /news:
    get:
      tags:
      - news
      summary: Return a list of news summaries
      operationId: getNewsList
      parameters:
        - in: query
          name: inclRead
          required: false
          schema:
            type: boolean
          description: Also include news entries that are read by the user
          example: true
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination number
          example: 0
      responses:
        200:
          description: List of news summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewsDTO'
        403:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        404:
          description: Couldn't find user to check for unread news
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    post:
      security:
        - ticketline_auth: []
      tags:
      - news
      summary: Create a new news entry - Admin task
      operationId: createNews
      requestBody:
        description: News entry to be persisted
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewsDTO'
        required: true
      responses:
        201:
          description: Created news entry
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Wrong credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /news/{newsId}:
    get:
      tags:
      - news
      summary: Get the content of one news article
      operationId: getNews
      parameters:
        - in: path
          name: newsId
          schema:
            type: integer
            format: int64
          description: ID of the news entity to return
          required: true
          example: 14
      responses:
        200:
          description: Content of the news article
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewsDTO'
        403:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        404:
          description: Couldn't find news entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /news/{newsId}/picture:
    post:
      security:
        - ticketline_auth: []
      tags:
        - news
      summary: Upload a picture to a news article - Admin task
      operationId: uploadPictureForNews
      parameters:
        - in: path
          name: newsId
          schema:
            type: integer
            format: int64
          description: ID of the news entry to upload the picture to
          required: true
          example: 14
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: file
          image/jpeg:
            schema:
              type: string
              format: file
      responses:
        201:
          description: Uploaded picture to news entry
          content:
            application/json:
              schema:
                type: string
                example: images/3sdf.png
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        404:
          description: News to upload picture to not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /news/{newsId}/markUnread:
    put:
      security:
        - ticketline_auth: []
      tags:
      - news
      summary: Mark a news article read by a user
      operationId: markRead
      parameters:
        - in: path
          name: newsId
          schema:
            type: integer
            format: int64
          description: ID of the news entry to mark as read
          required: true
          example: 14
        - in: query
          name: userId
          schema:
            type: integer
            format: int64
          description: ID of the user to mark the news read for
          required: true
          example: 3
      responses:
        200:
          description: Successfully marked as read
          content: {}
        403:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        404:
          description: User or News to mark read not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /event:
    get:
      tags:
      - event
      summary: Get the top 10 events of a month by ticket sales
      operationId: getTopTenEvents
      parameters:
        - in: query
          name: category
          schema:
            $ref: '#/components/schemas/EventCategory'
          description: Category of events to get Top Ten out of
          required: false
      responses:
        200:
          description: Top Ten Events this Month
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventDTO'
    post:
      security:
        - ticketline_auth: []
      tags:
        - event
      summary: Create a new event - Admin task
      operationId: createEvent
      requestBody:
        description: Event information to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventDTO'
        required: true
      responses:
        201:
          description: Created event entry
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 123
                description: The id of the created event
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Failed validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /event/{eventId}:
    get:
      tags:
        - event
      summary: Get the details of a  specific event
      operationId: getEvent
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            format: int64
          description: ID of the event to get the performances for
          required: true
          example: 73
      responses:
        200:
          description: List of Performances
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDTO'
        404:
          description: Couldn't find event entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /event/search:
    post:
      tags:
        - event
      summary: Search for events
      operationId: searchEvents
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination number
          example: 0
      requestBody:
        description: Search parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchEventDTO'
        required: true
      responses:
        200:
          description: Search performed without errors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventDTO'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Search parameter don't validate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /event/{eventId}/performance:
    get:
      tags:
        - event
      summary: Get the performances of a specific event
      operationId: getPerformances
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            format: int64
          description: ID of the event to get the performances for
          required: true
          example: 73
      responses:
        200:
          description: List of Performances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PerformanceDTO'
        404:
          description: Couldn't find event entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
    post:
      security:
        - ticketline_auth: []
      tags:
        - event
      summary: Create a new performance - Admin task
      operationId: createPerformance
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            format: int64
          description: ID of the event to create the performance for
          required: true
          example: 73
      requestBody:
        description: Performance information to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerformanceDTO'
        required: true
      responses:
        201:
          description: Created performance entry
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 123
                description: The id of the created performance
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Failed validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /event/{eventId}/performance/{performanceId}/seatmap:
    get:
      tags:
        - event
      summary: Get the occupation seatmap of a specific performance
      operationId: getSeatmapOfPerformance
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            format: int64
          description: ID of the event of the performance
          required: true
          example: 73
        - in: path
          name: performanceId
          schema:
            type: integer
            format: int64
          description: ID of the performance to get the seatmap of
          required: true
          example: 66
      responses:
        200:
          description: Occupation Seatmap of the performance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SeatmapOccupationDTO'
        404:
          description: Couldn't find event or performance entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /event/{eventId}/performance/{performanceId}/ticket:
    post:
      security:
      - ticketline_auth: []
      tags:
        - ticket
      summary: Buy or reserve tickets for a specific performance
      operationId: createTicket
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            format: int64
          description: ID of the event of the performance
          required: true
          example: 73
        - in: path
          name: performanceId
          schema:
            type: integer
            format: int64
          description: ID of the performance to get the seatmap of
          required: true
          example: 66
        - in: query
          name: reserve
          description: Do a reservation instead of a booking
          schema:
            type: boolean
          required: false
          example: false
      requestBody:
        description: Booked seats to create or reserve tickets for
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDTO'
      responses:
        201:
          description: Created Tickets
          content:
            application/json:
              schema:
                type: integer
                format: int64
                example: 254
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        403:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Failed validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /event/{eventId}/performance/{performanceId}/ticket/cancel:
    post:
      security:
        - ticketline_auth: []
      tags:
        - ticket
      summary: Cancel booked or reserved tickets
      operationId: cancelTickets
      parameters:
        - in: path
          name: eventId
          schema:
            type: integer
            format: int64
          description: ID of the event of the performance
          required: true
          example: 73
        - in: path
          name: performanceId
          schema:
            type: integer
            format: int64
          description: ID of the performance to cancel tickets from
          required: true
          example: 66
      requestBody:
        description: Booked seats to cancel
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDTO'
      responses:
        200:
          description: Canceled Tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  type: integer
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        403:
          description: Not logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Failed validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /event/performances:
    get:
      tags:
        - event
      summary: Get all performances
      operationId: getAllPerformances
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination number
          example: 0
      responses:
        200:
          description: List of Performances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PerformanceDTO'
        404:
          description: Couldn't find event entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /event/performances/search:
    post:
      tags:
        - event
      summary: Search for performances
      operationId: searchPerformances
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination number
          example: 0
      requestBody:
        description: Search parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchPerformanceDTO'
        required: true
      responses:
        200:
          description: Search performed without errors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PerformanceDTO'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Search parameter don't validate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/tickets:
    get:
      security:
        - ticketline_auth: []
      tags:
        - ticket
      summary: Get all booked and reserved tickets of a user
      operationId: getTicketsOfUser
      responses:
        200:
          description: Tickets of the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDTO'
        404:
          description: Couldn't find event or performance entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/ticket/{bookingId}/invoice:
    get:
      security:
        - ticketline_auth: []
      tags:
        - ticket
      summary: Get the invoice for a booking
      operationId: getInvoice
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the booking to generate the invoice for
          example: 254
        - in: query
          name: cancel
          required: false
          schema:
            type: boolean
          description: If true, a cancellation invoice is generated
          example: false
      responses:
        200:
          description: Invoice of the booking
          content:
            application/pdf:
              schema:
                type: string
                format: file
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        404:
          description: Couldn't find user or booking entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /user/ticket/{bookingId}/ticket:
    get:
      security:
        - ticketline_auth: []
      tags:
        - ticket
      summary: Get the print ticket for a booking
      operationId: getTicket
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the booking to generate the invoice for
          example: 254
      responses:
        200:
          description: Printable PDF Ticket
          content:
            application/pdf:
              schema:
                type: string
                format: file
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        404:
          description: Couldn't find user or booking entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /location:
    get:
      tags:
      - location
      summary: Return a list of locations
      operationId: getLocationList
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination number
          example: 0
      responses:
        200:
          description: List of locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDTO'
    post:
      security:
        - ticketline_auth: []
      tags:
        - location
      summary: Create a new location - Admin task
      operationId: createLocation
      requestBody:
        description: Location information to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationCreationDTO'
        required: true
      responses:
        201:
          description: Created Location
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Failed validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /location/{locationId}:
    get:
      tags:
        - location
      summary: Get the infos and seatmap for a location
      operationId: getLocation
      parameters:
        - in: path
          name: locationId
          schema:
            type: integer
            format: int64
          description: ID of the location to get the info for
          required: true
          example: 9
      responses:
        200:
          description: Location info
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDTO'
        404:
          description: Couldn't find location entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /location/search:
    post:
      tags:
        - location
      summary: Search for locations
      operationId: searchLocations
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination number
          example: 0
      requestBody:
        description: Search parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchLocationDTO'
        required: true
      responses:
        200:
          description: Search performed without errors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocationDTO'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Search parameter don't validate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /location/{locationId}/performances:
    get:
      tags:
        - location
      summary: Get the performances of a specific location
      operationId: getPerformancesOfLocation
      parameters:
        - in: path
          name: locationId
          schema:
            type: integer
            format: int64
          description: ID of the location to get the performances for
          required: true
          example: 22
      responses:
        200:
          description: List of Performances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PerformanceDTO'
        404:
          description: Couldn't find location entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /artist:
    get:
      tags:
      - artist
      summary: Return a list of artists
      operationId: getArtistList
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination number
          example: 0
      responses:
        200:
          description: List of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistDTO'

    post:
      tags:
        - artist
      summary: create new artist
      operationId: createArtist
      requestBody:
        description: Artist information to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArtistDTO'
        required: true
      responses:
        201:
          description: Created Artist
          content: {}
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        403:
          description: Not logged in or insufficient permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Failed validation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /artist/{artistId}:
    get:
      tags:
        - artist
      summary: Return a list of artists
      operationId: getArtist
      parameters:
        - in: path
          name: artistId
          schema:
            type: integer
            format: int64
          description: ID of the artist to fetch
          required: true
          example: 22
      responses:
        200:
          description: Queried artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArtistDTO'
        404:
          description: Couldn't find artist entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /artist/search:
    post:
      tags:
        - artist
      summary: Search for artists
      operationId: searchArtists
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
          description: Pagination number
          example: 0
      requestBody:
        description: Search parameter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchArtistDTO'
        required: true
      responses:
        200:
          description: Search without errors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ArtistDTO'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
        422:
          description: Search parameter don't validate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
  /artist/{artistId}/events:
    get:
      tags:
        - artist
      summary: Get the events of an artist
      operationId: getEventsOfArtist
      parameters:
        - in: path
          name: artistId
          schema:
            type: integer
            format: int64
          description: ID of the artist to get the events for
          required: true
          example: 68
      responses:
        200:
          description: List of events of the artist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventDTO'
        404:
          description: Couldn't find artist entry with that id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDTO'
components:
  schemas:
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        firstname:
          type: string
          example: Max
        lastname:
          type: string
          example: Mustermann
        login:
          $ref: '#/components/schemas/LoginDTO'
        address:
          $ref: '#/components/schemas/AddressDTO'
      required:
        - firstname
        - lastname
        - login
        - address
    UserUpdateDTO:
      type: object
      properties:
        firstname:
          type: string
          example: Max
        lastname:
          type: string
          example: Mustermann
        address:
          $ref: '#/components/schemas/AddressDTO'
    UserInfoDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 3
        email:
          type: string
          format: email
          example: max.mustermann@example.com
        role:
          type: string
          example: USER
        locked:
          type: boolean
          example: false
        wrongAttempts:
          type: integer
          example: 4
      required:
        - id
        - email
        - role
        - locked
    AddressDTO:
      type: object
      properties:
        street:
          type: string
          example: Testgasse
        housenr:
          type: string
          example: 3A/3
        postalcode:
          type: string
          example: 1020
        city:
          type: string
          example: Wien
        country:
          type: string
          example: Österreich
      required:
        - street
        - housenr
        - postalcode
        - city
        - country
    LoginDTO:
      type: object
      properties:
        email:
          type: string
          format: email
          example: max.mustermann@example.com
        password:
          type: string
          format: password
          example: secr3t! or *** in responses
      required:
        - email
        - password
    ErrorDTO:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ErrorType'
        message:
          type: string
          example: 'Was für ein Fehler!'
    ErrorType:
      type: string
      enum: [FATAL, WARN, INFO]
    NewsDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 14
        title:
          type: string
          example: New shiny ticketline application!
        summary:
          type: string
          example: A group of top level experts created an awesome cool app.
        content:
          type: string
          example: Bla Bla Bla Bla....
        publishedAt:
          type: string
          format: date-time
          example: 2018-06-01T07:30+08:00
        picturePath:
          type: string
          example: images/as4k_3d.png
        author:
          type: string
          example: Peter Pan
    EventDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 41
        title:
          type: string
          example: CLF Band danube island concert
        category:
          $ref: '#/components/schemas/EventCategory'
        duration:
          type: integer
          format: int64
          example: 120
          description: Duration in minutes
        description:
          type: string
          example: Awesome concert of the best band in the best location!
        artist:
          $ref: '#/components/schemas/ArtistDTO'
      required:
        - title
        - category
        - duration
        - description
    EventCategory:
      type: string
      enum: [CONCERT, FESTIVAL, THEATRE, OPERA, PARTY, LITERATURE, MUSICAL, SHOW, CIRCUS, COMEDY, WELLNESS, ADVENTURE, OTHER]
      example: CONCERT
    PerformanceDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 73
        dateTime:
          type: string
          format: date-time
          example: '2020-08-17 18:00'
        event:
          $ref: '#/components/schemas/EventDTO'
        location:
          $ref: '#/components/schemas/LocationDTO'
    SearchPerformanceDTO:
      type: object
      properties:
        date:
          type: string
          format: date
          example: '2020-08-17'
        time:
          type: string
          example: '18:00'
        price:
          type: number
          example: 29.99
        event:
          type: string
          example: Event 1
        location:
          type: string
          example: 'Ort'
    SearchEventDTO:
      type: object
      properties:
        description:
          type: string
          example: Event 1
        duration:
          type: integer
          format: int64
          example: 9
          description: duration in minutes
        title:
          type: string
          example: 'event title'
        artist:
          $ref: '#/components/schemas/ArtistDTO'
        category:
          $ref: '#/components/schemas/EventCategory'
    ArtistDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 68
        firstname:
          type: string
          example: Hans
        lastname:
          type: string
          example: Hölzl
    SearchArtistDTO:
      type: object
      properties:
        firstname:
          type: string
          example: Hans
        lastname:
          type: string
          example: Hölzl
    LocationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 9
        description:
          type: string
          example: Danube Island
        address:
          $ref: '#/components/schemas/AddressDTO'
    LocationCreationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 9
        description:
          type: string
          example: Danube Island
        address:
          $ref: '#/components/schemas/AddressDTO'
        seatmap:
          $ref: '#/components/schemas/SeatmapDTO'
    SearchLocationDTO:
      type: object
      properties:
        description:
          type: string
          example: Danube Island
        address:
          $ref: '#/components/schemas/AddressDTO'
    SeatmapDTO:
      type: object
      properties:
        seatGroupAreas:
          type: array
          items:
            $ref: '#/components/schemas/SeatgroupDTO'
        standingAreas:
          type: array
          items:
            $ref: '#/components/schemas/StandingAreaDTO'
    SeatDTO:
      type: object
      properties:
        x:
          type: number
          format: double
          example: 10
        y:
          type: number
          format: double
          example: 10
        rowLabel:
          type: string
          example: 'AC'
        colLabel:
          type: string
          example: '15'
        radius:
          type: number
          format: double
          example: 5
    SeatLabelDTO:
      type: object
      properties:
        x:
          type: number
          format: double
          example: 5
        y:
          type: number
          format: double
          example: 5
        size:
          type: number
          format: double
          example: 5
        text:
          type: string
          example: 'AB'
    StandingAreaDTO:
      type: object
      properties:
        x:
          type: number
          format: double
          example: 5
        y:
          type: number
          format: double
          example: 5
        width:
          type: number
          format: double
          example: 50
        height:
          type: number
          format: double
          example: 50
        name:
          type: string
          example: 'Haupttribüne'
        maxPeople:
          type: integer
          format: int64
          example: 100
        price:
          type: number
          format: double
          example: 19.99
    SeatgroupDTO:
      type: object
      properties:
        x:
          type: number
          format: double
          example: 5
        y:
          type: number
          format: double
          example: 5
        width:
          type: number
          format: double
          example: 50
        height:
          type: number
          format: double
          example: 50
        price:
          type: number
          format: double
          example: 3.50
        name:
          type: string
          example: 'Haupttribüne'
        seats:
          type: array
          items:
            $ref: '#/components/schemas/SeatDTO'
        seatLabels:
          type: array
          items:
            $ref: '#/components/schemas/SeatLabelDTO'

    SeatmapOccupationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        seatGroupAreas:
          type: array
          items:
            $ref: '#/components/schemas/SeatgroupOccupationDTO'
        standingAreas:
          type: array
          items:
            $ref: '#/components/schemas/StandingAreaOccupationDTO'
    SeatOccupationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        x:
          type: number
          format: double
          example: 10
        y:
          type: number
          format: double
          example: 10
        rowLabel:
          type: string
          example: 'AC'
        colLabel:
          type: string
          example: '15'
        radius:
          type: number
          format: double
          example: 5
        price:
          type: number
          format: double
          example: 19.99
        reserved:
          type: boolean
          example: false
        sold:
          type: boolean
          example: false
    StandingAreaOccupationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        x:
          type: number
          format: double
          example: 5
        y:
          type: number
          format: double
          example: 5
        width:
          type: number
          format: double
          example: 50
        height:
          type: number
          format: double
          example: 50
        name:
          type: string
          example: 'Haupttribüne'
        maxPeople:
          type: integer
          format: int64
          example: 100
        price:
          type: number
          format: double
          example: 19.99
        reserved:
          type: integer
          format: double
          example: 20
        sold:
          type: integer
          format: double
          example: 30
    SeatgroupOccupationDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        x:
          type: number
          format: double
          example: 5
        y:
          type: number
          format: double
          example: 5
        width:
          type: number
          format: double
          example: 50
        height:
          type: number
          format: double
          example: 50
        name:
          type: string
          example: 'Haupttribüne'
        seats:
          type: array
          items:
            $ref: '#/components/schemas/SeatOccupationDTO'
        seatLabels:
          type: array
          items:
            $ref: '#/components/schemas/SeatLabelDTO'


    BookingDTO:
      properties:
        id:
          type: integer
          format: int64
        performance:
          $ref: '#/components/schemas/PerformanceDTO'
        reservation:
          type: boolean
        fixedSeats:
          type: array
          items:
            $ref: '#/components/schemas/SeatgroupSeatDTO'
        freeSeats:
          type: array
          items:
            $ref: '#/components/schemas/FreeSeatgroupBookingDTO'
    SeatgroupSeatDTO:
      type: object
      properties:
        x:
          type: integer
          example: 7
        y:
          type: integer
          example: 3
        seatgroupId:
          type: integer
          format: int64
          example: 66
      required:
        - x
        - y
        - seatgroupId
    FreeSeatgroupBookingDTO:
      properties:
        amount:
          type: integer
          format: int64
          example: 3
        seatGroupId:
          type: integer
          format: int64
          example: 12
      required:
        - amount
        - seatGroupId
  securitySchemes:
    ticketline_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - ticketline_auth: []
